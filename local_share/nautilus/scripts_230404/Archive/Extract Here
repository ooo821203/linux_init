#!/usr/bin/env bash

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
# shellcheck source=/dev/null
source "${SCRIPT_DIR%/*}/common-functions"

# Initial checks
INPUT_FILES=$(_get_files "$*" "" "1" "" "") || exit 1
OUTPUT_DIR="$PWD"

_main_task() {
    local FILE=$1
    local OUTPUT_DIR=$2
    local COUNT_ROOT_FILES
    local EXIT_CODE
    local OUTPUT_TEMP_DIR
    local SINGLE_OUTPUT_FILENAME
    local STD_OUTPUT

    # Extract files into a temporary directory
    OUTPUT_TEMP_DIR=$(mktemp --directory --tmpdir=.)
    pushd "$OUTPUT_TEMP_DIR" &>/dev/null || exit 1

    # Extract the archive according the file extension
    case $FILE in
    *.tar.bz2 | *.tbz2 | *.tz2)
        STD_OUTPUT=$(tar --extract --bzip2 --file="../$FILE" 2>&1)
        ;;
    *.tar.gz | *.taz | *.tgz)
        STD_OUTPUT=$(tar --extract --gzip --file="../$FILE" 2>&1)
        ;;
    *.tar.lz | *.tlz)
        STD_OUTPUT=$(tar --extract --lzip --file="../$FILE" 2>&1)
        ;;
    *.tar.lzma | *.tlzma)
        STD_OUTPUT=$(tar --extract --lzma --file="../$FILE" 2>&1)
        ;;
    *.tar.lzo | *.tlzo)
        STD_OUTPUT=$(tar --extract --lzop --file="../$FILE" 2>&1)
        ;;
    *.tar.xz | *.txz)
        STD_OUTPUT=$(tar --extract --xz --file="../$FILE" 2>&1)
        ;;
    *.tar.Z | *.taZ)
        STD_OUTPUT=$(tar --extract --gzip --file="../$FILE" 2>&1)
        ;;
    *.tar.zst | *.tzst)
        STD_OUTPUT=$(tar --extract --zstd --file="../$FILE" 2>&1)
        ;;
    *.deb)
        STD_OUTPUT=$(ar x "../$FILE" 2>&1)
        ;;
    *.tar)
        STD_OUTPUT=$(tar --extract --file="../$FILE" 2>&1)
        ;;
    *.zst)
        STD_OUTPUT=$(zstd -d "../$FILE" 2>&1)
        ;;
    *)
        STD_OUTPUT=$(7z x -aoa "../$FILE" 2>&1)
        ;;
    esac

    # Check for result errors
    EXIT_CODE=$?
    _log_error_result "$FILE" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" ""

    # Check if the archive is a 'single file' compressed
    COUNT_ROOT_FILES=$(find . -mindepth 1 -maxdepth 1 | wc -l)
    if [[ "$COUNT_ROOT_FILES" == "1" ]]; then
        SINGLE_OUTPUT_FILENAME=$(find . -mindepth 1 -maxdepth 1)
    fi
    popd &>/dev/null || return

    if [[ "$COUNT_ROOT_FILES" == "0" ]]; then
        echo ""
    elif [[ -n "$SINGLE_OUTPUT_FILENAME" ]] &&
        [[ "./$(_get_filename_without_extension "$FILE")" == "$(_get_filename_without_extension "$SINGLE_OUTPUT_FILENAME")" ]] ||
        [[ "./$(_get_filename_without_extension "$FILE")" == "$SINGLE_OUTPUT_FILENAME" ]]; then
        # For a single output file with same name of archive
        _transfer_file "m" "$OUTPUT_TEMP_DIR/$SINGLE_OUTPUT_FILENAME" "$SINGLE_OUTPUT_FILENAME"
    else
        # For multiple output files, or
        # a single output file with different name of archive
        _transfer_file "m" "$OUTPUT_TEMP_DIR" "$(_get_filename_without_extension "$FILE")"
    fi
    rm -rf "$OUTPUT_TEMP_DIR"
}

_run_parallel_tasks "$INPUT_FILES"
_display_result_tasks "$OUTPUT_DIR"
