#!/usr/bin/env bash

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
# shellcheck source=/dev/null
source "${SCRIPT_DIR%/*}/common-functions"

# Initial checks
_check_dependencies cmp iconv perl || exit 1
INPUT_FILES=$(_get_files "$*" "text;application" "1" "" "r") || exit 1
OUTPUT_DIR="$PWD"

_main_task() {
    local FILE=$1
    local OUTPUT_DIR=$2
    local OUTPUT_FILE
    local STD_OUTPUT
    local EXIT_CODE
    local BACKUP_FILE
    local TEMP_FILE1
    local TEMP_FILE2
    local TEMP_FILE3
    local TEMP_FILE4

    # Skip 'binary' files
    if file -bi "$FILE" | grep -q "binary"; then
        return
    fi

    # Create a temp file in a temporary directory
    # (this directory is removed after finish by a 'trap' command)
    TEMP_FILE1=$(mktemp --tmpdir="$TEMP_DIR")
    TEMP_FILE2=$(mktemp --tmpdir="$TEMP_DIR")
    TEMP_FILE3=$(mktemp --tmpdir="$TEMP_DIR")
    TEMP_FILE4=$(mktemp --tmpdir="$TEMP_DIR")

    # Run the process (part 1) 'convert encoding to utf-8'
    STD_OUTPUT=$(iconv -f "$(file -bi "$FILE" | cut -d '=' -f 2)" "$FILE" -t utf-8 -o "$TEMP_FILE1")
    EXIT_CODE=$?
    _log_error_result "$FILE" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" "" || return

    # Run the process (part 2) 'convert line ending to unix'
    STD_OUTPUT=$(perl -pe 's/\r\n|\n|\r/\n/g' "$TEMP_FILE1" >"$TEMP_FILE2")
    EXIT_CODE=$?
    _log_error_result "$FILE" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" "" || return

    # Run the process (part 3) 'remove trailing spaces'
    STD_OUTPUT=$(sed 's|[ \t]*\(\r*\)$|\1|' "$TEMP_FILE2" >"$TEMP_FILE3")
    EXIT_CODE=$?
    _log_error_result "$FILE" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" "" || return

    # Run the process (part 4) 'remove empty line in EOF'
    echo "" >>"$TEMP_FILE3"
    STD_OUTPUT=$(sed ':Loop;N;$!bLoop;s|\n*$||g' "$TEMP_FILE3" >"$TEMP_FILE4")
    EXIT_CODE=$?
    _log_error_result "$FILE" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" "" || return

    # Check if the file is different, then copy it to the output directory
    if ! cmp --silent "$FILE" "$TEMP_FILE4"; then
        OUTPUT_FILE="$FILE"
        BACKUP_FILE="$FILE.convert.bak"

        # Create a backup file
        STD_OUTPUT=$(_transfer_file "c" "$FILE" "$BACKUP_FILE" 2>&1)
        EXIT_CODE=$?
        _log_error_result "$FILE" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" "" || return
        chmod --reference="$FILE_SRC" "$FILE_DST"

        # Modify the original file
        cat "$TEMP_FILE4" >"$OUTPUT_FILE"
        _log_error_result "$FILE" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" "$OUTPUT_FILE"
    fi

    # Remove the temporary files for each iteration
    rm -rf "$TEMP_FILE1"
    rm -rf "$TEMP_FILE2"
    rm -rf "$TEMP_FILE3"
    rm -rf "$TEMP_FILE4"
}

_run_parallel_tasks "$INPUT_FILES"
_display_result_tasks "$OUTPUT_DIR"
