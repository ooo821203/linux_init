#!/usr/bin/env bash

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
# shellcheck source=/dev/null
source "${SCRIPT_DIR%/*}/common-functions"

# Initial checks
_check_dependencies cmp iconv || exit 1
INPUT_FILES=$(_get_files "$*" "text;application" "1" "" "") || exit 1
OUTPUT_DIR=$(_get_output_dir) || exit 1

_main_task() {
    local FILE=$1
    local OUTPUT_DIR=$2
    local OUTPUT_FILE
    local STD_OUTPUT
    local EXIT_CODE
    local TEMP_FILE

    # Skip 'binary' files
    if file -bi "$FILE" | grep -q "binary"; then
        return
    fi

    # Create a temp file in a temporary directory
    # (this directory is removed after finish by a 'trap' command)
    TEMP_FILE=$(mktemp --tmpdir="$TEMP_DIR")

    # Run the main process
    STD_OUTPUT=$(iconv -f "$(file -bi "$FILE" | cut -d '=' -f 2)" "$FILE" -t utf-8 -o "$TEMP_FILE")
    EXIT_CODE=$?
    _log_error_result "$FILE" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" "" || return

    # Check if the file is different, then move it to the output directory
    if ! cmp --silent "$FILE" "$TEMP_FILE"; then
        OUTPUT_FILE="$OUTPUT_DIR/$FILE"
        _transfer_file "c" "$TEMP_FILE" "$OUTPUT_FILE"
        chmod --reference="$FILE" "$OUTPUT_FILE"
        _log_error_result "$FILE" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" "$OUTPUT_FILE"
    fi

    # Remove the temporary file for each iteration
    rm -rf "$TEMP_FILE"
}

_run_parallel_tasks "$INPUT_FILES"
_display_result_tasks "$OUTPUT_DIR"
