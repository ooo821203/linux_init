#!/usr/bin/env bash

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
# shellcheck source=/dev/null
source "${SCRIPT_DIR%/*}/common-functions"

# Initial checks
_check_dependencies zenity || exit 1
INPUT_FILES=$(_get_files "$*" "text;application" "1" "" "r") || exit 1

_main_task() {
    local FILE=$1
    # shellcheck disable=SC2034
    local OUTPUT_DIR=$2
    local TEMP_FILE
    local RESULT_FILE
    local FILE_ENCODING
    local FILE_INFORMATION

    # Skip 'binary' files
    if file -bi "$FILE" | grep -q "binary"; then
        return
    fi

    FILE_ENCODING=$(file --mime-encoding "$FILE" | sed "s|\([^:]*\):[ \t]*\(.*\)|\2|")
    FILE_INFORMATION=$(file "$FILE" | sed "s|\([^:]*\):[ \t]*\(.*\)|\2|")

    # Run the checker 'non UTF-8 encoding'
    if [[ "${FILE_ENCODING,,}" != *"us-ascii"* ]] && [[ "${FILE_ENCODING,,}" != *"utf-8"* ]]; then
        RESULT_FILE+="[non UTF-8 encoding]"
    fi

    # Run the checker 'UTF-8 with BOM'
    if [[ "${FILE_ENCODING,,}" == *"utf-8"* ]]; then
        if head -c3 "$FILE" | LC_ALL=C grep -qP '\xef\xbb\xbf'; then
            RESULT_FILE+="[UTF-8 with BOM]"
        fi
    fi

    # Run the checker 'non LF line break'
    if [[ "$FILE_INFORMATION" == *"with CR"* ]]; then
        RESULT_FILE+="[non LF line break]"
    fi

    # Run the checker 'trailing spaces' (for Unix and Windows files)
    if grep -P -q "[ \t]\r?$" "$FILE"; then
        RESULT_FILE+="[trailing spaces]"
    fi

    # Run the checker 'trailing spaces' (for Mac files)
    if [[ "$FILE_INFORMATION" == *"with CR line"* ]] || [[ "$FILE_INFORMATION" == *"with CR, LF line"* ]]; then
        if cat -A "$FILE" | grep -q " ^M"; then
            RESULT_FILE+="[trailing spaces]"
        fi
    fi

    # Run the checker 'missing line break at the end'
    if ! tail -c 1 "$FILE" | hexdump -e '16/1 "%02x" "\n"' | grep -q "0d\|0a"; then
        RESULT_FILE+="[missing line at the end]"
    else
        if tail -c 3 "$FILE" | hexdump -e '16/1 "%02x" "\n"' | grep -q "..0d0d\|..0a0a\|0a0d0a"; then
            # Run the checker 'has many line breaks at the end'
            RESULT_FILE+="[many lines at the end]"
        fi
    fi

    # Save the result only for files with problems
    if [[ -n "$RESULT_FILE" ]]; then
        # Create a temp file in a temporary directory
        # (this directory is removed after finish by a 'trap' command)
        TEMP_FILE=$(mktemp --tmpdir="$TEMP_DIR")
        echo "$RESULT_FILE: \"$FILE\"" >"$TEMP_FILE"
    fi
}

_run_parallel_tasks "$INPUT_FILES"
STD_OUTPUT=$(cat "$TEMP_DIR"/*)

STD_OUTPUT=$(echo "$STD_OUTPUT" | grep -v "^$")
STD_OUTPUT=$(echo "$STD_OUTPUT" | sort -V)

_display_info_box "$STD_OUTPUT" "Find files: with problems"
