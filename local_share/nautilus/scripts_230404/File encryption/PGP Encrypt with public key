#!/usr/bin/env bash

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
# shellcheck source=/dev/null
source "${SCRIPT_DIR%/*}/common-functions"

# Initial checks
_check_dependencies gpg zenity || exit 1
INPUT_FILES=$(_get_files "$*" "" "1" "" "") || exit 1
USERS=$(gpg --list-public-keys --with-colons | grep "^uid" | cut -d ':' -f 10)
if [[ -z "$USERS" ]]; then
    _msg_error "Signing failed: there is no secret keys!"
    exit 1
fi
DATA=$(echo "$USERS" | tr ':' '\n' | zenity --list --title="Select the user" --text="Select the user from the list below." --column="User" --height=200 --width=600 2>/dev/null) || exit 1
if [[ -z "$DATA" ]]; then
    _msg_error "Signing failed: you must select a user!"
    exit 1
fi
OUTPUT_DIR=$(_get_output_dir) || exit 1

_main_task() {
    local FILE=$1
    local OUTPUT_DIR=$2
    local OUTPUT_FILE
    local STD_OUTPUT
    local EXIT_CODE

    OUTPUT_FILE="$OUTPUT_DIR/$FILE.gpg"
    STD_OUTPUT=$(gpg --batch --yes --encrypt --recipient "$DATA" --for-your-eyes-only --s2k-count 1015808 --s2k-digest-algo SHA256 --compress-algo zlib --cipher-algo AES256 --output "$OUTPUT_FILE" "$FILE" 2>&1)
    EXIT_CODE=$?
    _log_error_result "$FILE" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" "$OUTPUT_FILE"
}

_run_parallel_tasks "$INPUT_FILES"
_display_result_tasks "$OUTPUT_DIR"
